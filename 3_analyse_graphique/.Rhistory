#multiplie par deux
strrep(nom, 6)
}
multiplieParDeux("ettore ")
multiplie <- function(x,y) {
x * y
}
multiplie(4,5)
multiplie <- function(x,y,z) {
x * y - z
}
multiplie(4,5, 10)
library(rvest)
library(tidyverse)
library(readr)
#On importe et visualise le fichier csv issu des scraping
data =
read_csv("3_analyse_graphique/scrapings_wallonie_bruxelles.csv")
View(data)
library(tidyverse)
library(readr)
#On importe et visualise le fichier csv issu des scraping
data =
read_csv("C:\Users\ettor\Documents\GitHub\AJPRO_dataj\3_analyse_graphique\scrapings_wallonie_bruxelles.csv")
View(data)
setwd("~/GitHub/AJPRO_dataj/3_analyse_graphique")
library(tidyverse)
library(readr)
#On importe et visualise le fichier csv issu des scraping
data =
read_csv("scrapings_wallonie_bruxelles.csv")
View(data)
data_filtered %>% filter(elu=="non")
data_filtered =
data %>%
group_by(liste) %>%
filter(place_liste != max(place_liste)) %>%
filter(place_liste != max(place_liste)) %>%
filter(place_liste != max(place_liste))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
data_filtered %>% filter(elu=="non")
data_filtered %>% filter(elu=="non")[1]
data_filtered %>% filter(first(elu=="non"))
data_filtered %>% filter(first(elu=="non"))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
data_filtered %>% group_by(liste) %>%  filter(first(elu=="non"))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
data_filtered %>% filter(last(elu=="non"))
View(data_filtered)
?first
data_filtered %>% mutate(first = first(elu=="non"))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
View(data_filtered %>% mutate(first = first(elu=="non")))
View(data_filtered %>% mutate(first_non_elu = position_elu[which(is.na(position_elu))[1]]))
View(data_filtered %>% mutate(first_non_elu = position_elu[which(elu=="non")[1]]))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
View(data_filtered %>% summarize(first_non_elu = position_elu[which(elu=="non")[1]]))
View(data_filtered %>% summarize(first_non_elu = position_elu[which(is.na(position_elu))[1]]))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
View(data_filtered %>% summarize(first_non_elu = which.min(is.na(position_elu))[1]))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
View(data_filtered %>% summarize(first_non_elu = place_liste[which.min(is.na(position_elu))[1]]))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
View(data_filtered %>% group_by(liste) %>% summarize(first_non_elu = place_liste[which.min(is.na(position_elu))]))
#calculer l'indice du dernier du groupe de tête par liste(ou du premier non elu)
View(data_filtered %>% group_by(liste) %>% summarize(first_non_elu = place_liste[which(is.na(position_elu))[1]]))
#calculer l'indice du dernier du groupe de tête par liste(sur base du premier non elu)
View(data_filtered %>%
group_by(liste) %>%
summarize(first_non_elu = place_liste[which(is.na(position_elu))[1]] - 1))
View(data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1))
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, diff_avec_last=place_liste-last_elu)
#calculer l'indice du dernier du groupe de tête d'élues'élus par liste(sur base du premier non elu)
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, diff_avec_last=place_liste-last_elu)
View(result)
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
arrange(desc(diff_avec_last))
View(result)
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
arrange(desc(diff_avec_last))
#calculer l'indice du dernier du groupe de tête d'élues'élus par liste(sur base du premier non elu)
#calculer la différente cette valeur et la psoiton sur la liste des élus
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
arrange(desc(place_positionelu), desc(diff_avec_last))
#Ne garder que le top1 par commune
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
max(place_positionelu, diff_avec_last)
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune)
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune)
View(result_commune)
?max
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
filter(pmax(place_positionelu, diff_avec_last))
#Ne garder que le top1 par commune
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
filter(max(place_positionelu, diff_avec_last))
#Ne garder que le top1 par commune
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
filter(max(place_positionelu))
#Ne garder que le top1 par commune
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
filter(place_positionelu==pmax(place_positionelu, diff_avec_last))
View(result_commune)
#Ne garder que le top1 par commune
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
filter(place_positionelu==pmax(place_positionelu))
View(result_commune)
result_commune =
data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1,
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
ungroup() %>%
group_by(commune) %>%
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
slice(c(1,n()))
result_commune =
result %>%
ungroup() %>%
group_by(commune) %>%
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
slice(c(1,n()))
View(result_commune)
result_commune =
result %>%
ungroup() %>%
group_by(commune) %>%
arrange(desc(place_positionelu)) %>%
slice(c(1,n()))
View(result_commune)
result_commune =
result %>%
ungroup() %>%
group_by(commune) %>%
arrange(desc(place_positionelu))
dplyrAssist:::dplyrAssist()
View(result)
library(ggplot2)
top_partis = table(result$parti)
top_partis
top_partis = as.data.frame.matric(table(result$parti))
top_partis = as.data.frame.matrix(table(result$parti))
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, # trouvé sur SO
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
#question : doit-on privilégier la différence entre la place-place_elu ou l'autre ?
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
filter(diff_avec_last > 29)
#calculer la position sur la liste du dernier du groupe de tête d'élus par liste(sur base du premier non elu)
#calculer la différence entre cette valeur et la position sur la liste des élus
#on pourrait affiner en calculant la place du "premier non élu non suivi d'un élu", mais KISS
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, # trouvé sur SO
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
#question : doit-on privilégier la différence entre la place-place_elu ou l'autre ?
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
filter(diff_avec_last > 10)
#calculer la position sur la liste du dernier du groupe de tête d'élus par liste(sur base du premier non elu)
#calculer la différence entre cette valeur et la position sur la liste des élus
#on pourrait affiner en calculant la place du "premier non élu non suivi d'un élu", mais KISS
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, # trouvé sur SO
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
#question : doit-on privilégier la différence entre la place-place_elu ou l'autre ?
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
filter(diff_avec_last > 15)
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, # trouvé sur SO
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
#question : doit-on privilégier la différence entre la place-place_elu ou l'autre ?
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
filter(diff_avec_last > 20)
top_partis = table(result$commune)
top_partis
?table
top_partis = ftable(result$commune)
top_partis
top_partis = ftable(result$province)
top_partis
top_partis = table(result$province)
top_partis
top_partis = table(result$liste)
top_partis
library(rpivotTable)
rpivotTable()
rpivotTable(result)
devtools::install_github("dkilfoyle/rpivotGadget")
rpivotGadget:::rpivotAddin()
library(dplyr)
library(readr)
library(ggplot2)
#On importe et visualise le fichier csv issu des scraping
data =
read_csv("scrapings_wallonie_bruxelles.csv")
View(data)
#1 On crée une copie du dataframe data sans les trois derniers de chaque liste
#(Chercher une solution plus élégante que trois filter)
data_filtered =
data %>%
group_by(liste) %>%
filter(place_liste != max(place_liste)) %>%
filter(place_liste != max(place_liste)) %>%
filter(place_liste != max(place_liste))
View(data_filtered)
#calculer la position sur la liste du dernier du groupe de tête d'élus par liste(sur base du premier non elu)
#calculer la différence entre cette valeur et la position sur la liste des élus
#on pourrait affiner en calculant la place du "premier non élu non suivi d'un élu", mais KISS
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, # trouvé sur SO
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
#question : doit-on privilégier la différence entre la place-place_elu ou l'autre ?
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
filter(diff_avec_last > 20)
rpivotGadget:::rpivotAddin()
rpivotGadget:::rpivotAddin()
library(dplyr)
library(readr)
library(ggplot2)
#On importe et visualise le fichier csv issu des scraping
data =
read_csv("scrapings_wallonie_bruxelles.csv")
View(data)
#1 On crée une copie du dataframe data sans les trois derniers de chaque liste
#(Chercher une solution plus élégante que trois filter)
data_filtered =
data %>%
group_by(liste) %>%
filter(place_liste != max(place_liste)) %>%
filter(place_liste != max(place_liste)) %>%
filter(place_liste != max(place_liste))
View(data_filtered)
#calculer la position sur la liste du dernier du groupe de tête d'élus par liste(sur base du premier non elu)
#calculer la différence entre cette valeur et la position sur la liste des élus
#on pourrait affiner en calculant la place du "premier non élu non suivi d'un élu", mais KISS
result = data_filtered %>%
group_by(liste) %>%
mutate(last_elu = place_liste[which(is.na(position_elu))[1]] - 1, # trouvé sur SO
diff_avec_last=place_liste-last_elu) %>%
filter(elu=="oui") %>%
#question : doit-on privilégier la différence entre la place-place_elu ou l'autre ?
arrange(desc(place_positionelu), desc(diff_avec_last)) %>%
filter(diff_avec_last > 20)
View(result)
rpivotGadget:::rpivotAddin()
table_partis =
result %>%
group_by(parti_propre) %>%
summarise(n=n())
View(table_partis)
table_partis =
result %>%
group_by(parti_propre) %>%
summarise(nombre=n())
table_partis =
result %>%
group_by(parti_propre) %>%
summarise(nombre=n()) %>%
arrange(desc(nombre))
View(table_partis)
table_partis =
result %>%
group_by(parti_propre) %>%
summarise(nombre=n()) %>%
arrange(desc(nombre)) %>%
head(5)
View(table_partis)
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggplot(data=table_partis) +
aes(x=parti_propre, y=nombre) +
geom_bar() +
theme_minimal()
ggplot(data=table_partis) +
aes(x=parti_propre) +
geom_bar() +
theme_minimal()
ggplot(data=table_partis) +
aes(x=parti_propre) +
geom_histogram() +
theme_minimal()
table_partis =
result %>%
group_by(parti_propre) %>%
arrange(desc(nombre)) %>%
head(5)
ggplot(data=table_partis) +
aes(x=parti_propre) +
geom_bar() +
theme_minimal()
table_partis =
result %>%
group_by(parti_propre) %>%
arrange(desc(nombre))
ggplot(data=table_partis) +
aes(x=parti_propre) +
geom_bar() +
theme_minimal()
View(table_partis)
table_partis =
result %>%
group_by(parti_propre) %>%
arrange(desc(n(parti_propre)))
table_partis =
result %>%
group_by(parti_propre) %>%
arrange(desc(n()))
table_partis =
result %>%
group_by(parti_propre) %>%
arrange(desc(n())) %>% toclipboard()
table_partis =
result %>%
group_by(parti_propre) %>%
arrange(desc(nombre)) %>%
head(5)
table_partis =
result %>%
group_by(parti_propre) %>%
summarise(nombre=n()) %>%
arrange(desc(nombre)) %>%
head(5)
View(table_partis)
table_partis =
result %>%
group_by(parti_propre) %>%
summarise(nombre=n()) %>%
arrange(desc(nombre)) %>%
head(10)
View(table_partis)
#un petit graphique vite-fait
barplot(table_partis)
barplot(result$commune)
?barplot
#un petit graphique vite-fait
barplot(count(result$commune))
ggplot(table_partis,
aes(x=parti_propre, y = Freq, fill=parti_propre)) +
geom_bar(stat="identity")
ggplot(table_partis,
aes(x=parti_propre, y = nombre, fill=parti_propre)) +
geom_bar(stat="identity")
ggplot(table_partis)+
aes(x=parti_propre, y = nombre, fill=parti_propre)) +
geom_bar(stat="identity")
#un petit graphique vite-fait
ggplot(table_partis,
aes(x=parti_propre, y = nombre, fill=parti_propre)) +
geom_bar(stat="identity") +
theme_minimal()
#un petit graphique vite-fait
ggplot(table_partis,
aes(x=reorder(parti_propre), y = nombre, fill=parti_propre)) +
geom_bar(stat="identity") +
theme_minimal()
?reoreder
?reorder
#un petit graphique vite-fait
ggplot(table_partis,
aes(x=reorder(parti_propre, nombre), y = nombre, fill=parti_propre)) +
geom_bar(stat="identity") +
theme_minimal()
#un petit graphique vite-fait
ggplot(table_partis,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=parti_propre)) +
geom_bar(stat="identity") +
theme_minimal()
table_partis =
result %>%
group_by(parti_propre,province) %>%
summarise(nombre=n()) %>%
arrange(desc(nombre)) %>%
head(10)
View(table_partis)
ggplot(table_partis,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province)) +
geom_bar(stat="identity") +
theme_minimal()
ggThemeAssist:::ggThemeAssistAddin()
table_partis_province =
result %>%
group_by(parti_propre,province) %>%
summarise(nombre=n()) %>%
arrange(desc(nombre)) %>%
head(10)
View(table_partis_province)
#un petit graphique vite-fait
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province)) +
geom_bar(stat="identity") +
theme_minimal()
ggThemeAssist:::ggThemeAssistAddin()
#un petit graphique vite-fait
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province, label = nombre)) +
geom_bar(stat="identity") +
theme_minimal() + theme(axis.text.x = element_text(angle = -25),
plot.title = element_text(vjust = 0.25)) +labs(x = "Parti", y = "Nombre")
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province)) +
geom_bar(stat="identity") +
theme_minimal() + theme(axis.text.x = element_text(angle = -25),
plot.title = element_text(vjust = 0.25)) +labs(x = "Parti", y = "Nombre") +
+
geom_text(size = 3, position = position_stack(vjust = 0.5))
#un petit graphique vite-fait
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province)) +
geom_bar(stat="identity") +
theme_minimal() + theme(axis.text.x = element_text(angle = -25),
plot.title = element_text(vjust = 0.25)) +labs(x = "Parti", y = "Nombre") +
geom_text(size = 3, position = position_stack(vjust = 0.5))
#un petit graphique vite-fait
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province, label=nombre)) +
geom_bar(stat="identity") +
theme_minimal() + theme(axis.text.x = element_text(angle = -25),
plot.title = element_text(vjust = 0.25)) +labs(x = "Parti", y = "Nombre") +
geom_text(size = 3, position = position_stack(vjust = 0.5))
#un petit graphique vite-fait
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province, label=nombre)) +
geom_bar(stat="identity") +
theme_minimal() +
geom_text(size = 3, position = position_stack(vjust = 0.5))
#un petit graphique vite-fait
ggplot(table_partis_province,
aes(x=reorder(parti_propre, -nombre), y = nombre, fill=province, label=nombre)) +
geom_bar(stat="identity") +
theme_minimal()  +
labs(x = "Parti", y = "Nombre") +
geom_text(size = 3, position = position_stack(vjust = 0.5))
